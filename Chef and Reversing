#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
 
using namespace std;
using namespace chrono;
using namespace __gnu_pbds;
 
#define MOD 1000000007
#define int long long int
#define MOD1 998244353
#define INF 1e18
#define nline "\n"
#define pb push_back
#define ppb pop_back
#define mp make_pair
#define ff first
#define ss second
#define PI 3.141592653589793238462
#define set_bits __builtin_popcountll
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
#define nl cout<<nline;
 
#ifndef ONLINE_JUDGE
#define debug(x) cerr<< #x <<" "; _print(x); cerr<<"\n";
#else
#define debug(x)
#endif
 
#define fastio() ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
 
// Call this function if you wish to know if my code give TLE or not
void checkTimeout(){
    double tm=(float)clock()/CLOCKS_PER_SEC;
    if(tm>=2){
        cerr<<"Time limit exeeded"<<endl;
        exit(0);
    }
}
typedef long long ll;

typedef unsigned long long ull;
typedef long double lld;

typedef tree<pair<ll, ll>, null_type, less<pair<ll, ll>>, rb_tree_tag, tree_order_statistics_node_update > pbds; // find_by_order, order_of_key
 
void _print(ll t) {cerr << t;}
// void _print(int t) {cerr << t;}
void _print(string t) {cerr << t;}
void _print(char t) {cerr << t;}
void _print(lld t) {cerr << t;}
void _print(double t) {cerr << t;}
void _print(ull t) {cerr << t;}
 
// Operator overloads <<, >>
template<typename T1, typename T2>
istream &operator>>(istream &istream, pair<T1, T2> &p) {
    return (istream >> p.first >> p.second);
} // cin >> pair<T1, T2>
template<typename T>
istream &operator>>(istream &istream, vector<T> &v) {
    for (auto &it : v) {
        cin >> it;
    }
    return istream;
} // cin >> vector<T>
template<typename T1, typename T2>
ostream &operator<<(ostream &ostream, const pair<T1, T2> &p) {
    return (ostream << p.first << " " << p.second)<<nline;
} // cout << pair<T1, T2>
template<typename T>
ostream &operator<<(ostream &ostream, const vector<T> &c) {
    for (auto &it : c) {
        cout << it << " ";
    }
    return ostream;
} // cout << vector<T>
 
template <class T, class V> void _print(pair <T, V> p);
template <class T> void _print(vector <T> v);
template <class T> void _print(set <T> v);
template <class T, class V> void _print(map <T, V> v);
template <class T> void _print(multiset <T> v);
template <class T, class V> void _print(pair <T, V> p) {cerr << "{"; _print(p.ff); cerr << ","; _print(p.ss); cerr << "}";}
template <class T> void _print(vector <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(set <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(multiset <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T, class V> void _print(map <T, V> v) {cerr << "[ "; for (auto i : v) {_print(i); cerr << " ";} cerr << "]";}
void _print(pbds v) {cerr << "[ "; for (auto i : v) {_print(i); cerr << " ";} cerr << "]";}
 
mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());
/*---------------------------------------------------------------------------------------------------------------------------*/
// complexity of this function Log(max(a,b))
ll gcd(ll a, ll b) {if (b > a) {return gcd(b, a);} if (b == 0) {return a;} return gcd(b, a % b);}
ll expo(ll a, ll b, ll mod) {ll res = 1; while (b > 0) {if (b & 1)res = (res * a) % mod; a = (a * a) % mod; b = b >> 1;} return res;}
ll simpleExpo(ll a, ll b) {ll res = 1; while (b > 0) {if (b & 1)res = (res * a) ; a = (a * a); b = b >> 1;} return res;}
void extendgcd(ll a, ll b, ll*v) {if (b == 0) {v[0] = 1; v[1] = 0; v[2] = a; return ;} extendgcd(b, a % b, v); ll x = v[1]; v[1] = v[0] - v[1] * (a / b); v[0] = x; return;} //pass an arry of size1 3
ll mminv(ll a, ll b) {ll arr[3]; extendgcd(a, b, arr); return arr[0];} //for non prime b
ll mminvprime(ll a, ll b) {return expo(a, b - 2, b);}
bool revsort(ll a, ll b) {return a > b;}
ll combination(ll n, ll r, ll m, ll *fact, ll *ifact) {ll val1 = fact[n]; ll val2 = ifact[n - r]; ll val3 = ifact[r]; return (((val1 * val2) % m) * val3) % m;}
void google(int t) {cout << "Case #" << t << ": ";}
vector<ll> sieve(int n) {int*arr = new int[n + 1](); vector<ll> vect; for (int i = 2; i <= n; i++)if (arr[i] == 0) {vect.push_back(i); for (int j = 2 * i; j <= n; j += i)arr[j] = 1;} return vect;}
ll mod_add(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a + b) % m) + m) % m;}
ll mod_mul(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a * b) % m) + m) % m;}
ll mod_sub(ll a, ll b, ll m) {a = a % m; b = b % m; return ((a - b) + m) % m;}
//only for prime m
ll mod_div(ll a, ll b, ll m) {a = a % m; b = b % m; return (mod_mul(a, mminvprime(b, m), m) + m) % m;}
 
ll phin(ll n) {ll number = n; if (n % 2 == 0) {number /= 2; while (n % 2 == 0) n /= 2;} for (ll i = 3; i <= sqrt(n); i += 2) {if (n % i == 0) {while (n % i == 0)n /= i; number = (number / i * (i - 1));}} if (n > 1)number = (number / n * (n - 1)) ; return number;} //O(sqrt(N))
ll getRandomNumber(ll l, ll r) {return uniform_int_distribution<ll>(l, r)(rng);}
 
void yes(){
    cout<<"YES\n";
}
void no(){
    cout<<"NO\n";
}


#define ordered_set1 tree<int,null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>
#define ordered_set2 tree<int,null_type,greater<int>, rb_tree_tag,tree_order_statistics_node_update>
#define ordered_set3 tree<int,null_type,less_equal<int>, rb_tree_tag,tree_order_statistics_node_update>
#define ordered_set4 tree<int,null_type,greater_equal<int>, rb_tree_tag,tree_order_statistics_node_update>
 
vector<ll> givePrefixInclude(vector<ll> &vect){
    vector<ll>prefix(vect.size(),0);
 
    prefix[0] = vect[0];
 
    for(int i=1 ; i<vect.size() ; i++)
        prefix[i] = prefix[i-1]+vect[i];
 
    return prefix;
}
 
vector<ll> givePrefixExclude(vector<ll> &vect){
    vector<ll>prefix(vect.size(),0);
 
    for(int i=1 ; i<vect.size() ; i++)
        prefix[i] = prefix[i-1]+vect[i-1];
 
    return prefix;
}
 
vector<ll> givePostfixInclude(vector<ll> &vect){
    vector<ll>postfix(vect.size(),0);
    ll size = postfix.size();
 
    postfix[size-1] = vect.back();
 
    for(ll i=size-2 ; i>=0 ; i--)
        postfix[i] = postfix[i+1]+vect[i];
 
    return postfix;
}
 
vector<ll> givePostfixExclude(vector<ll> &vect){
    vector<ll>postfix(vect.size(),0);
    ll size = postfix.size();
 
    for(ll i=size-2 ; i>=0 ; i--)
        postfix[i] = postfix[i+1]+vect[i+1];
 
    return postfix;
}
 
void setPrecesion(ll val){
    std::cout << std::fixed;
    std::cout << std::setprecision(val);
      
}
 
bool primeCheck(ll val){
    ll temp = ceil(sqrt(val));
    for(ll i=2 ; i<=temp ; i++){
        if( 0==val%i )
            return false;
    }
    return true;
}
 
// complexity of this function is O(N*Log(N))
void countFactors(ll n){
    vector<ll> factors(n+1,0);
    for(ll i=2 ; i<=n ; i++){
        for(ll j=i ; j<=n  ; j+=i){
            factors[j]+=1;
        }
    }
}
 
// complexity of this function is O(N*(Log(Log(N))))
vector<bool> checkAllPrime(ll n ){
    vector<bool>isPrime(n+1,true);
    isPrime[1] = false;
    isPrime[0] = false;
    for(ll i=2 ; i<=n ; i++){
        if( isPrime[i] ){
            for(ll j=i*i ; j<=n ; j+=i){
                isPrime[j] = false;
            }
        }
    }
    return isPrime;
}
 
vector<ll> allCountPrimeFactors(ll n){
    vector<ll>primeFactors(n+1,0);
 
    for(ll i=2 ; i<=n ; i++){
        if( 0==primeFactors[i] ){
            for(ll j=i*2 ; j<=n ; j+=i){
                primeFactors[j] += 1;
            }
        }
    }
    return primeFactors;
}
 
ll _gcd(ll n1,ll n2){
    if( 0==n1 )
        return n2;
    return _gcd(n2%n1,n1);
}
 
struct hash_pair {
    template <class T1, class T2>
    size_t operator()(const pair<T1, T2>& p) const
    {
        auto hash1 = hash<T1>{}(p.first);
        auto hash2 = hash<T2>{}(p.second);
        return hash1 ^ hash2;
    }
};
// use in this ways 
// unordered_map<pair<int, int>, int , hash_pair> ump;
 
/*--------------------------------------------------------------------------------------------------------------------------*/
ll floorSqrt(ll x)
{
    // Base cases
    if (x == 0 || x == 1)
        return x;
 
    // Starting from 1, try all numbers until
    // i*i is greater than or equal to x.
    ll i = 1, result = 1;
    while (result <= x)
    {
      i++;
      result = i * i;
    }
    i-=1;
    
    return i;
}
void primeFactors(ll n,map<ll,ll> &mp)
{
    // Print the number of 2s that divide n
    while (n % 2 == 0)
    {
        // cout << 2 << " ";
        n = n/2;
        mp[2] += 1;
    }
 
    // n must be odd at this point. So we can skip
    // one element (Note i = i +2)
    for (ll i = 3; i <= sqrt(n); i = i + 2)
    {
        // While i divides n, print i and divide n
        while (n % i == 0)
        {
            // cout << i << " ";
            n = n/i;
            mp[i] += 1;
        }
    }
 
    // This condition is to handle the case when n
    // is a prime number greater than 2
    if (n >= 2)
        mp[n] += 1;
}
ll power(ll x, ll  y)
{
    if (y == 0)
        return 1;
    ll temp = power(x, y / 2);
    if (y % 2 == 0)
        return temp * temp;
    else
        return x * temp * temp;
}
void nextGreater(vector<int> &nums,vector<int> &ng){
    stack<int> st;
    
    int len = nums.size();
    ng[len-1] = -1;
    st.push(len-1);
    
    for(int i=len-2 ; i>=0 ; i--){
        while( !st.empty() && nums[st.top()]<=nums[i] )
            st.pop();
        if( st.empty() )
            ng[i]=-1;
        else
            ng[i] = st.top();
        st.push(i);
    }
}
void nextSmaller(vector<int> &nums,vector<int> &ns){
    stack<int> st;
    
    int len = nums.size();
    ns[len-1] = -1;
    st.push(len-1);
    
    for(int i=len-2 ; i>=0 ; i--){
        while( !st.empty() && nums[st.top()]>=nums[i] )
            st.pop();
        if( st.empty() )
            ns[i] = -1;
        else
            ns[i] = st.top();
        if( st.empty() )
            st.push(i);
    }
}
 
ll binarySize(ll num){
    ll size = 0;
    while(num)
        size += 1,num = num>>1;
    return size;
}

ull decSize(ull num){
    ll size = 0;
    while( num )    size += 1,num /= 10;
    return size;
}

struct cmpByStringLength {
    bool cmp(const ll &left,const ll &right){
        return left>right;
    }

};

// ...

void findAllFactors(ll n,std::vector<ll>& factors){
    double sqroot=sqrt(n);
    factors.push_back(1);
    for(ll i=2;i<=sqroot;i++){
        if(n%i == 0){
            factors.push_back(i);
            if(n/i != i){
                factors.push_back(n/i);
            }
        }
    }
    factors.push_back(n);
}

ll lcm(ll a,ll b){
    return (a*b)/(_gcd(a,b));
}
void print(ll val){
    cout<<val<<nline;
}
ll bfs(vector< vector<pair<ll,ll>> > &adj){
    queue< int > q;
    q.push(1);
    vector< int > cost(adj.size(),INF);
    cost[1] = 0;
    while( !q.empty() ){
        int node = q.front();q.pop();
        // cout<<node<<" "<<cost[node]<<nline;
        for(auto child : adj[node] ){
            if( cost[child.first] > cost[node]+child.second ){
                cost[child.first] = cost[node]+child.second;
                q.push(child.first);
            }
        }
    }
    return cost.back()==INF?-1:cost.back();
}
void solve(){
    ll nodes,edges;
    cin>>nodes>>edges;
    vector< vector<pair<ll,ll>> > adj(nodes+1);
    ll u,v;
    for(int i=0 ; i<edges; i++){
        cin>>u>>v;
        if( u==v )  continue;
        adj[u].push_back( {v,0} );
        adj[v].push_back( {u,1} );
    }
    print( bfs(adj) );
}

signed main() {
    fastio();
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("outpt.txt", "w", stdout);
    freopen("Error.txt", "w", stderr);
#endif
    ll test;
    test = 1;
    // cin>>test;
    
    while(test--){
        solve();
    }
    cerr<<"time taken : "<<(float)clock()/CLOCKS_PER_SEC<<" secs"<<endl;
    return 0;
}

// use unordered_map only when no. of unique values in ump is less than 10^4 OR you have enough time to do rehashing
 
// don't try to be fast during contest try to be accurate and observe all the corner cases
